import React, { useState, useEffect, useRef } from 'react';
import { Play, Pause, RotateCcw, Settings, TrendingUp, Clock, Zap, DollarSign, Activity, Eye } from 'lucide-react';

const EthPoolSimulator = () => {
  const [isRunning, setIsRunning] = useState(false);
  const [transactions, setTransactions] = useState([]);
  const [blocks, setBlocks] = useState([]);
  const [currentBlock, setCurrentBlock] = useState(null);
  const [gasPrice, setGasPrice] = useState(20);
  const [blockTime, setBlockTime] = useState(12000);
  const [viewMode, setViewMode] = useState('pool');
  const [stats, setStats] = useState({
    avgGasPrice: 20,
    pendingTxs: 0,
    mevOpportunities: 0,
    blockUtilization: 0
  });

  const poolRef = useRef(null);
  const intervalRef = useRef(null);
  const blockIntervalRef = useRef(null);

  // Transaction types with different characteristics
  const txTypes = [
    { type: 'transfer', label: 'Transfer', color: '#10B981', gasLimit: 21000, priority: 1 },
    { type: 'swap', label: 'DEX Swap', color: '#3B82F6', gasLimit: 150000, priority: 2 },
    { type: 'arbitrage', label: 'Arbitrage', color: '#F59E0B', gasLimit: 300000, priority: 3 },
    { type: 'liquidation', label: 'Liquidation', color: '#EF4444', gasLimit: 400000, priority: 4 },
    { type: 'nft', label: 'NFT Mint', color: '#8B5CF6', gasLimit: 100000, priority: 1 },
    { type: 'sandwich', label: 'Sandwich', color: '#EC4899', gasLimit: 250000, priority: 5 }
  ];

  // Generate random transaction
  const generateTransaction = () => {
    const txType = txTypes[Math.floor(Math.random() * txTypes.length)];
    const baseGas = gasPrice + (Math.random() - 0.5) * 10;
    const priorityFee = txType.priority * 2 + Math.random() * 5;
    
    return {
      id: Math.random().toString(36).substr(2, 9),
      type: txType.type,
      label: txType.label,
      color: txType.color,
      gasPrice: Math.max(1, baseGas + priorityFee),
      gasLimit: txType.gasLimit,
      maxFeePerGas: Math.max(1, baseGas + priorityFee + Math.random() * 10),
      maxPriorityFeePerGas: priorityFee,
      timestamp: Date.now(),
      value: Math.random() * 10,
      from: '0x' + Math.random().toString(16).substr(2, 40),
      to: '0x' + Math.random().toString(16).substr(2, 40),
      status: 'pending'
    };
  };

  // Start simulation
  const startSimulation = () => {
    setIsRunning(true);
    
    // Generate transactions
    intervalRef.current = setInterval(() => {
      const newTx = generateTransaction();
      setTransactions(prev => [...prev.slice(-200), newTx]);
    }, 500 + Math.random() * 1000);

    // Process blocks
    blockIntervalRef.current = setInterval(() => {
      processBlock();
    }, blockTime);
  };

  // Stop simulation
  const stopSimulation = () => {
    setIsRunning(false);
    if (intervalRef.current) clearInterval(intervalRef.current);
    if (blockIntervalRef.current) clearInterval(blockIntervalRef.current);
  };

  // Process block creation
  const processBlock = () => {
    setTransactions(prev => {
      const pending = prev.filter(tx => tx.status === 'pending');
      const sorted = pending.sort((a, b) => b.gasPrice - a.gasPrice);
      const blockTxs = sorted.slice(0, 50); // Simulate block gas limit
      
      const newBlock = {
        id: Math.random().toString(36).substr(2, 9),
        number: blocks.length + 1,
        timestamp: Date.now(),
        transactions: blockTxs,
        gasUsed: blockTxs.reduce((sum, tx) => sum + tx.gasLimit, 0),
        gasLimit: 30000000,
        baseFeePerGas: gasPrice,
        mevValue: blockTxs.filter(tx => ['arbitrage', 'sandwich', 'liquidation'].includes(tx.type))
                         .reduce((sum, tx) => sum + tx.value, 0)
      };

      setBlocks(prevBlocks => [...prevBlocks.slice(-10), newBlock]);
      setCurrentBlock(newBlock);

      // Mark transactions as confirmed
      return prev.map(tx => 
        blockTxs.find(btx => btx.id === tx.id) 
          ? { ...tx, status: 'confirmed', blockNumber: newBlock.number }
          : tx
      );
    });
  };

  // Update stats
  useEffect(() => {
    const pendingTxs = transactions.filter(tx => tx.status === 'pending');
    const avgGas = pendingTxs.length > 0 
      ? pendingTxs.reduce((sum, tx) => sum + tx.gasPrice, 0) / pendingTxs.length 
      : gasPrice;
    
    const mevTxs = pendingTxs.filter(tx => ['arbitrage', 'sandwich', 'liquidation'].includes(tx.type));
    
    setStats({
      avgGasPrice: Math.round(avgGas * 10) / 10,
      pendingTxs: pendingTxs.length,
      mevOpportunities: mevTxs.length,
      blockUtilization: currentBlock ? Math.round((currentBlock.gasUsed / currentBlock.gasLimit) * 100) : 0
    });
  }, [transactions, currentBlock, gasPrice]);

  // Reset simulation
  const resetSimulation = () => {
    stopSimulation();
    setTransactions([]);
    setBlocks([]);
    setCurrentBlock(null);
  };

  // Render transaction in pool
  const renderTransaction = (tx, index) => {
    const opacity = Math.max(0.3, 1 - (Date.now() - tx.timestamp) / 30000);
    const size = Math.max(20, Math.min(40, tx.gasPrice * 2));
    
    return (
      <div
        key={tx.id}
        className="absolute transition-all duration-500 rounded-full border-2 border-white/20 flex items-center justify-center text-xs font-bold text-white cursor-pointer hover:scale-110 hover:border-white/50"
        style={{
          backgroundColor: tx.color,
          width: size,
          height: size,
          left: `${(index * 47) % 90}%`,
          top: `${20 + (Math.floor(index / 20) * 10) % 60}%`,
          opacity: tx.status === 'pending' ? opacity : 0.3,
          transform: tx.status === 'confirmed' ? 'scale(0.5)' : 'scale(1)'
        }}
        title={`${tx.label} - ${tx.gasPrice.toFixed(1)} gwei`}
      >
        {tx.gasPrice.toFixed(0)}
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-indigo-900 text-white p-6">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-4xl font-bold mb-2 bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
          EthPool Simulator
        </h1>
        <p className="text-gray-300 text-lg">
          Real-time Ethereum Transaction Pool Visualization & MEV Analytics
        </p>
      </div>

      {/* Controls */}
      <div className="flex flex-wrap gap-4 mb-6">
        <button
          onClick={isRunning ? stopSimulation : startSimulation}
          className={`flex items-center gap-2 px-6 py-3 rounded-lg font-semibold transition-all ${
            isRunning 
              ? 'bg-red-600 hover:bg-red-700' 
              : 'bg-green-600 hover:bg-green-700'
          }`}
        >
          {isRunning ? <Pause size={20} /> : <Play size={20} />}
          {isRunning ? 'Pause' : 'Start'} Simulation
        </button>
        
        <button
          onClick={resetSimulation}
          className="flex items-center gap-2 px-6 py-3 bg-gray-600 hover:bg-gray-700 rounded-lg font-semibold transition-all"
        >
          <RotateCcw size={20} />
          Reset
        </button>

        <div className="flex items-center gap-4 bg-gray-800/50 rounded-lg px-4 py-2">
          <label className="text-sm">Base Gas Price:</label>
          <input
            type="range"
            min="5"
            max="100"
            value={gasPrice}
            onChange={(e) => setGasPrice(Number(e.target.value))}
            className="w-20"
          />
          <span className="text-sm font-mono">{gasPrice} gwei</span>
        </div>

        <div className="flex gap-2">
          {['pool', 'blocks', 'mev'].map(mode => (
            <button
              key={mode}
              onClick={() => setViewMode(mode)}
              className={`px-4 py-2 rounded-lg font-semibold transition-all ${
                viewMode === mode 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-gray-700 hover:bg-gray-600 text-gray-300'
              }`}
            >
              {mode === 'pool' && <Activity size={16} className="inline mr-2" />}
              {mode === 'blocks' && <Clock size={16} className="inline mr-2" />}
              {mode === 'mev' && <Eye size={16} className="inline mr-2" />}
              {mode.charAt(0).toUpperCase() + mode.slice(1)}
            </button>
          ))}
        </div>
      </div>

      {/* Stats Dashboard */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <div className="bg-gray-800/50 backdrop-blur rounded-lg p-4">
          <div className="flex items-center gap-2 mb-2">
            <TrendingUp className="text-green-400" size={20} />
            <span className="text-sm text-gray-400">Avg Gas Price</span>
          </div>
          <div className="text-2xl font-bold text-green-400">{stats.avgGasPrice} gwei</div>
        </div>
        
        <div className="bg-gray-800/50 backdrop-blur rounded-lg p-4">
          <div className="flex items-center gap-2 mb-2">
            <Activity className="text-blue-400" size={20} />
            <span className="text-sm text-gray-400">Pending Txs</span>
          </div>
          <div className="text-2xl font-bold text-blue-400">{stats.pendingTxs}</div>
        </div>
        
        <div className="bg-gray-800/50 backdrop-blur rounded-lg p-4">
          <div className="flex items-center gap-2 mb-2">
            <Eye className="text-yellow-400" size={20} />
            <span className="text-sm text-gray-400">MEV Opportunities</span>
          </div>
          <div className="text-2xl font-bold text-yellow-400">{stats.mevOpportunities}</div>
        </div>
        
        <div className="bg-gray-800/50 backdrop-blur rounded-lg p-4">
          <div className="flex items-center gap-2 mb-2">
            <Zap className="text-purple-400" size={20} />
            <span className="text-sm text-gray-400">Block Utilization</span>
          </div>
          <div className="text-2xl font-bold text-purple-400">{stats.blockUtilization}%</div>
        </div>
      </div>

      {/* Main Visualization */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Transaction Pool */}
        <div className="lg:col-span-2 bg-gray-800/30 backdrop-blur rounded-lg p-6 border border-gray-700/50">
          <h2 className="text-xl font-bold mb-4 flex items-center gap-2">
            <Activity className="text-blue-400" />
            Transaction Pool
            <span className="text-sm text-gray-400 ml-2">({transactions.filter(tx => tx.status === 'pending').length} pending)</span>
          </h2>
          
          <div 
            ref={poolRef}
            className="relative h-96 bg-gradient-to-br from-gray-900/50 to-blue-900/20 rounded-lg border border-gray-600/30 overflow-hidden"
          >
            {transactions.filter(tx => tx.status === 'pending').map((tx, index) => renderTransaction(tx, index))}
            
            {transactions.filter(tx => tx.status === 'pending').length === 0 && (
              <div className="absolute inset-0 flex items-center justify-center text-gray-500">
                <div className="text-center">
                  <Activity size={48} className="mx-auto mb-4 opacity-50" />
                  <p>No pending transactions</p>
                  <p className="text-sm">Start simulation to see transactions</p>
                </div>
              </div>
            )}
          </div>

          {/* Legend */}
          <div className="mt-4 flex flex-wrap gap-4">
            {txTypes.map(type => (
              <div key={type.type} className="flex items-center gap-2">
                <div 
                  className="w-4 h-4 rounded-full border border-white/20"
                  style={{ backgroundColor: type.color }}
                />
                <span className="text-sm text-gray-300">{type.label}</span>
              </div>
            ))}
          </div>
        </div>

        {/* Side Panel */}
        <div className="space-y-6">
          {/* Current Block */}
          {currentBlock && (
            <div className="bg-gray-800/30 backdrop-blur rounded-lg p-6 border border-gray-700/50">
              <h3 className="text-lg font-bold mb-4 flex items-center gap-2">
                <Clock className="text-green-400" />
                Latest Block #{currentBlock.number}
              </h3>
              
              <div className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-gray-400">Transactions:</span>
                  <span className="font-mono">{currentBlock.transactions.length}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Gas Used:</span>
                  <span className="font-mono">{(currentBlock.gasUsed / 1000000).toFixed(1)}M</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Base Fee:</span>
                  <span className="font-mono">{currentBlock.baseFeePerGas} gwei</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">MEV Value:</span>
                  <span className="font-mono text-yellow-400">{currentBlock.mevValue.toFixed(2)} ETH</span>
                </div>
              </div>

              {/* Block utilization bar */}
              <div className="mt-4">
                <div className="flex justify-between text-sm mb-1">
                  <span className="text-gray-400">Block Utilization</span>
                  <span>{stats.blockUtilization}%</span>
                </div>
                <div className="w-full bg-gray-700 rounded-full h-2">
                  <div 
                    className="bg-gradient-to-r from-green-400 to-blue-400 h-2 rounded-full transition-all duration-300"
                    style={{ width: `${stats.blockUtilization}%` }}
                  />
                </div>
              </div>
            </div>
          )}

          {/* MEV Opportunities */}
          <div className="bg-gray-800/30 backdrop-blur rounded-lg p-6 border border-gray-700/50">
            <h3 className="text-lg font-bold mb-4 flex items-center gap-2">
              <Eye className="text-yellow-400" />
              MEV Opportunities
            </h3>
            
            <div className="space-y-2 max-h-48 overflow-y-auto">
              {transactions
                .filter(tx => tx.status === 'pending' && ['arbitrage', 'sandwich', 'liquidation'].includes(tx.type))
                .slice(0, 10)
                .map(tx => (
                  <div key={tx.id} className="flex items-center justify-between p-2 bg-gray-700/30 rounded">
                    <div className="flex items-center gap-2">
                      <div 
                        className="w-3 h-3 rounded-full"
                        style={{ backgroundColor: tx.color }}
                      />
                      <span className="text-sm">{tx.label}</span>
                    </div>
                    <div className="text-right">
                      <div className="text-sm font-mono">{tx.gasPrice.toFixed(1)} gwei</div>
                      <div className="text-xs text-yellow-400">{tx.value.toFixed(2)} ETH</div>
                    </div>
                  </div>
                ))}
              
              {transactions.filter(tx => tx.status === 'pending' && ['arbitrage', 'sandwich', 'liquidation'].includes(tx.type)).length === 0 && (
                <div className="text-center text-gray-500 py-8">
                  <Eye size={32} className="mx-auto mb-2 opacity-50" />
                  <p className="text-sm">No MEV opportunities detected</p>
                </div>
              )}
            </div>
          </div>

          {/* Gas Price Prediction */}
          <div className="bg-gray-800/30 backdrop-blur rounded-lg p-6 border border-gray-700/50">
            <h3 className="text-lg font-bold mb-4 flex items-center gap-2">
              <TrendingUp className="text-blue-400" />
              Gas Price Trends
            </h3>
            
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="text-gray-400">Current Base:</span>
                <span className="font-mono">{gasPrice} gwei</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-400">Average:</span>
                <span className="font-mono">{stats.avgGasPrice} gwei</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-400">Next Block Est:</span>
                <span className="font-mono text-green-400">{(gasPrice + (stats.avgGasPrice - gasPrice) * 0.1).toFixed(1)} gwei</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Footer */}
      <div className="mt-8 text-center text-gray-500 text-sm">
        <p>EthPool Simulator - Advanced Ethereum Transaction Pool Visualization</p>
        <p>Built for demonstrating deep understanding of Ethereum infrastructure and MEV dynamics</p>
      </div>
    </div>
  );
};

export default EthPoolSimulator;